package com.medicalcenterportal.controllers;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.crossstore.ChangeSetPersister.NotFoundException;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.medicalcenter.dto.MedicalAndMedicineRecordDTO;
import com.medicalcenter.entities.MedicalRecord;
import com.medicalcenter.entities.Medicine;
import com.medicalcenter.entities.Specialty;
import com.medicalcenter.entities.User;
import com.medicalcenter.exceptions.UserNotFoundException;
import com.medicalcenter.helpers.AppConstant;
import com.medicalcenter.paging.PagingAndSortingHelper;
import com.medicalcenter.paging.PagingAndSortingParam;
import com.medicalcenter.services.MedicalRecordService;
import com.medicalcenter.services.MedicineRecordService;
import com.medicalcenter.services.MedicineService;
import com.medicalcenter.services.SpecialtyService;
import com.medicalcenter.services.UserService;
import com.medicalcenterportal.security.AppUserDetails;

@Controller
@RequestMapping("/medicalrecords")
public class MedicalRecordController {

	private String defaultRedirectURL = "redirect:/medicalrecords/page/1?sortField=patients&sortDir=asc";

	@Autowired
	private MedicalRecordService medicalRecordService;
	@Autowired
	private SpecialtyService specialtyService;

	@Autowired
	private MedicineService medicineService;
	@Autowired
	private MedicineRecordService medicineRecordService;
	@Autowired

	private final UserService userService;

	@Autowired
	public MedicalRecordController(MedicalRecordService medicalRecordService, UserService userService) {
		this.medicalRecordService = medicalRecordService;
		this.userService = userService;
	}

	@GetMapping("")
	public String getMedicalRecordList(Model model,
			@RequestParam(name = "searchText", required = false, defaultValue = "") String searchText,
			@RequestParam(name = "sortField", defaultValue = "lastVisitDate") String sortField,
			@RequestParam(name = "sortDir", defaultValue = "asc") String sortDir,
			@RequestParam(name = "startDate", required = false) String startDate,
			@RequestParam(name = "endDate", required = false) String endDate) {
		List<MedicalRecord> listMedicalRecords;
		List<User> patients = userService.getUsersByRoleId(3L);
		List<User> doctors = userService.getUsersByRoleId(2L);
		List<Specialty> specialties = specialtyService.getAllSpecialty();

		if (startDate != null && !startDate.isEmpty() && endDate != null && !endDate.isEmpty()) {
			LocalDateTime start = LocalDate.parse(startDate).atStartOfDay();
			LocalDateTime end = LocalDate.parse(endDate).atTime(LocalTime.MAX);
			listMedicalRecords = medicalRecordService.getAllMedicalRecordsByDateRange(start, end);
		} else if (!searchText.isEmpty()) {
			listMedicalRecords = medicalRecordService.searchMedicalRecordsByKeyword(searchText);
		} else {
			
			listMedicalRecords = medicalRecordService.getAllMedicalRecords(sortField, sortDir);
		}

		model.addAttribute("patients", patients);
		model.addAttribute("specialties", specialties);
		model.addAttribute("doctors", doctors);
		model.addAttribute("listMedicalRecords", listMedicalRecords);
		model.addAttribute("currentPage", "1");
		model.addAttribute("sortField", sortField);
		model.addAttribute("sortDir", sortDir);
		model.addAttribute("reverseSortDir", "desc");
		model.addAttribute("searchText", searchText);
		model.addAttribute("moduleURL", "/medicalrecords");

		return "/apps/medicalrecords/list";
	}

	@GetMapping("/listd")
	public String getRecordList(Model model, @AuthenticationPrincipal AppUserDetails loggedUser,
			@RequestParam(name = "startDate", required = false) String startDate,
			@RequestParam(name = "endDate", required = false) String endDate) throws UserNotFoundException {
		List<MedicalRecord> listMedicalRecords;
		List<User> patients = userService.getUsersByRoleId(3L);
		List<User> doctors = userService.getUsersByRoleId(2L);
		List<Specialty> specialties = specialtyService.getAllSpecialty();

		User user = userService.get(loggedUser.getId());
		

		if (startDate != null && endDate != null && !startDate.isEmpty() && !endDate.isEmpty()) {
			LocalDateTime start = LocalDate.parse(startDate).atStartOfDay();
			LocalDateTime end = LocalDate.parse(endDate).atTime(LocalTime.MAX);
			listMedicalRecords = medicalRecordService
					.getAllMedicalRecordsByDoctorIdAndLastVisitDateBetween(loggedUser.getId(), start, end);
		} else {
			listMedicalRecords = medicalRecordService.getAllMedicalRecordsByDoctorId(loggedUser.getId());
		}

		model.addAttribute("patients", patients);
		model.addAttribute("specialties", specialties);
		model.addAttribute("doctors", doctors);
		model.addAttribute("listMedicalRecords", listMedicalRecords);
		model.addAttribute("loggedDoctorId", loggedUser.getId());

		model.addAttribute("currentPage", "1");
		model.addAttribute("sortField", "lastVisitDate");
		model.addAttribute("sortDir", "asc");
		model.addAttribute("reverseSortDir", "desc");
		model.addAttribute("searchText", "");
		model.addAttribute("moduleURL", "/medicalrecords");

		return "/apps/medicalrecords/listd";
	}

	@GetMapping("/page")
	public String listByPage() {
	    return defaultRedirectURL;
	}

	@GetMapping("/page/{pageNum}")
	public String listByPage(
	        @PagingAndSortingParam(listName = "listMedicalRecords", moduleURL = "/medicalrecords", defaultSortField = "patientUser") PagingAndSortingHelper helper,
	        @PathVariable(name = "pageNum") int pageNum,
	        @RequestParam(name = "sortField", defaultValue = "patientUser", required = false) String sortField,
	        @RequestParam(name = "sortDir", defaultValue = "asc", required = false) String sortDir) {

	    System.out.println("MedicalRecordControllerlistByPage::" + pageNum + " sortField: " + sortField + " sortDir: " + sortDir);
	    
	    medicalRecordService.listMedicalRecordByPage(pageNum, AppConstant.pageCount, helper);

	    return "/apps/medicalrecords/list";
	}
	


	@GetMapping("/listall")
	public String getAllMedicalAndMedicineRecords(Model model) {
		List<MedicalAndMedicineRecordDTO> records = medicineRecordService.getAllMedicalAndMedicineRecords();
		model.addAttribute("records", records);
		return "/apps/medicalrecords/listall";
	}

	@GetMapping("/add")
	public String showCreateForm(Model model) {
		List<User> patients = userService.getUsersByRoleId(3L);
		List<User> doctors = userService.getUsersByRoleId(2L);

		model.addAttribute("medicalrecord", new MedicalRecord());
		model.addAttribute("patients", patients);

		model.addAttribute("doctors", doctors);

		return "/apps/medicalrecords/add";
	}

	@PostMapping("/add")
	public String createMedicalRecord(@ModelAttribute("medicalrecord") MedicalRecord medicalRecord,
	        @RequestParam("patientUserId") Long patientUserId, @RequestParam("doctorUserId") Long doctorUserId) {
	    if (patientUserId != null && doctorUserId != null) {
	        LocalDateTime lastVisitDate = medicalRecord.getLastVisitDate();
	        LocalDateTime followUpDate = medicalRecord.getFollowUpDate();
	        String description = medicalRecord.getDescription();

	        medicalRecordService.createMedicalRecord(patientUserId, doctorUserId, lastVisitDate, followUpDate, description);

	        return "redirect:/medicalrecords/listd";
	    } else {
	        return "redirect:/error";
	    }
	}


	@GetMapping("/addm/{id}")
	public String addmedical(@PathVariable("id") Long id, Model model,
	                         @RequestParam(required = false, name = "searchText") String searchText) throws NotFoundException {
	    MedicalRecord medicalrecord = medicalRecordService.getMedicalRecordById(id);
	    List<Medicine> medicines;

	    if (searchText != null && !searchText.isEmpty()) {
	        medicines = medicineService.searchMedicinesByKeyword(searchText);
	    } else {
	        medicines = new ArrayList<>();
	    }

	    System.out.println("Medicines: " + medicines);

	    model.addAttribute("medicalrecord", medicalrecord);
	    model.addAttribute("medicines", medicines);

	    return "/apps/medicalrecords/addm";
	}


	@PostMapping("/saveMedicineRecord")
	public String addmedical(@RequestParam("medicalRecordId") Long medicalRecordId,
			@RequestParam("medicineId") Long medicineId, @RequestParam("quantity") String quantity,
			@RequestParam("note") String note) {

		medicineRecordService.saveMedicineRecord(medicalRecordId, medicineId, quantity, note);

		return "redirect:/medicalrecords/addm/" + medicalRecordId;
	}

	@GetMapping("/edit/{id}")
	public String showEditForm(@PathVariable("id") Long id, Model model) throws NotFoundException {
	    MedicalRecord medicalRecord = medicalRecordService.getMedicalRecordById(id);
	    
	    if (medicalRecord != null) {
	        List<User> patients = userService.getUsersByRoleId(3L);
	        List<User> doctors = userService.getUsersByRoleId(2L);
	        
	        model.addAttribute("medicalrecord", medicalRecord);
	        model.addAttribute("patients", patients);
	        model.addAttribute("doctors", doctors);
	        
	        return "/apps/medicalrecords/edit"; 
	    } else {
	        return "redirect:/error"; 
	    }
	}


	@PostMapping("/edit/{id}")
	public String updateMedicalRecord(@PathVariable("id") Long id, @ModelAttribute("medicalrecord") MedicalRecord medicalRecord,
	        @RequestParam("lastVisitDate") String lastVisitDate, @RequestParam("followUpDate") String followUpDate,
	        @RequestParam("patientUserId") Long patientUserId, @RequestParam("doctorUserId") Long doctorUserId) {
	    if (patientUserId != null && doctorUserId != null) {
	        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm");

	        LocalDateTime lastVisitDateTime = LocalDateTime.parse(lastVisitDate, formatter);
	        LocalDateTime followUpDateTime = LocalDateTime.parse(followUpDate, formatter);

	        if (lastVisitDateTime.isAfter(followUpDateTime)) {
	            throw new IllegalArgumentException("Last visit date must be before follow-up date");
	        }

	        medicalRecord.setLastVisitDate(lastVisitDateTime);
	        medicalRecord.setFollowUpDate(followUpDateTime);

	        String description = medicalRecord.getDescription();

	        medicalRecordService.editMedicalRecord(id, patientUserId, doctorUserId, followUpDateTime, lastVisitDateTime, description);

	        return "redirect:/medicalrecords/listd";
	    } else {
	        return "redirect:/error"; 
	    }
	}




	@GetMapping("/details/{id}")
	public String showMedicalRecordDetails(@PathVariable("id") Long id, Model model) {
	    // Retrieve medical record details from the database using the provided id
	    Optional<MedicalRecord> medicalRecordOptional = medicalRecordService.findById(id);
	    
	    if (!medicalRecordOptional.isPresent()) {
	        return "error"; 
	    }
	    
	    MedicalRecord medicalRecord = medicalRecordOptional.get();
	    model.addAttribute("medicalRecord", medicalRecord);
	    
	    return "apps/medicalrecords/details"; 
	}
	
	
	@GetMapping("/delete/{id}")
	public String deleteMedicalRecord(@PathVariable("id") Long id) {
		medicalRecordService.deleteMedicalRecord(id);
		return "redirect:/medicalrecords/listd";
	}

}